#!/bin/bash


PACKAGES(){

    # i can't find the way to check if there those font or note. it will cost time if  i downloading fonts every time. so when i need uncomment it. 
    # sudo pacman -S --noconfirm ttf-jetbrains-mono-nerd
    
    # languages and utiliy to code 

    # python
    sudo pipx --version || sudo pacman -S --noconfirm python-pipx \ pipx ensurepath
    poetry --version || pipx install poetry # for sudo poetry i get : command not found and 100% trying installing every time.
	
	# git
    sudo git --version || sudo pacman -S --noconfirm git # and if it was installed like a directory?
    sudo gh --version || sudo pacman -S --noconfirm github-cli

    sudo clang --version || sudo pacman -S --noconfirm clang
    sudo go || sudo pacman -S --noconfirm go # like with poetry. NOTE: i can't find the way not to do second after || comand. if go = True it will do the second thing 
    sudo cargo --version || sudo pacman -S --noconfirm rust
    sudo node --version || sudo pacman -S --noconfirm nodejs 
    tmux -V || sudo pacman -S --noconfirm tmux 
    sudo bear --version || sudo pacman -S --noconfirm bear
    
    # utiliy
    sudo unzip --version|| sudo pacman -S --noconfirm unzip # like go do the second thing even if first = true.
    sudo curl --version || sudo pacman -S --noconfirm curl
    # i need find analogue to neofetch.
    #sudo neofetch --version || sudo pacman -S --noconfirm neofetch
    sudo htop --version || sudo pacman -S --noconfirm htop
    sudo ripgrep --version || sudo pacman -S --noconfirm ripgrep
    
    # flatpak apps
    #flatpak install pcsx2 # the only app that can be install by flatpak

	# neovim
	sudo nvim --version || sudo pacman -S --noconfirm neovim
	git clone https://github.com/arsyhiy/nvim.git ~/.config/nvim # it will not cloning if if directory already there. so it will cost not much.
	
    
    # setup git config 
    git config --global user.name "arsyhiy"
    git config --global user.email arsyhiy32@gmail.com


    #ssh
    sshd -V || sudo pacman -S --noconfirm openssh-server
}


COPYMOVE(){
    printf "\n"
    printf "=======================================================================\n"
    printf "executing config.sh .\n"
    printf "=======================================================================\n"
    chmod +x config.sh
    ./config.sh
}

ZSH(){
    printf "\n"
    printf "=======================================================================\n"
    printf "installing zsh .\n"
    printf "=======================================================================\n"

    # zsh and plugins
    sudo zsh --version || sudo pacman -S --noconfirm -y zsh
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
}




packages(){
    while true; do
        printf "install necessary packages? (e.g y - yes or n - no ):"
        read -r choice

        if [ "$choice" == "y" ]; then
            PACKAGES
            break
        elif [ "$choice" == "n" ]; then
            printf "installing packages is canceled\n"
            break
        else
            printf "type y or n\n"
        fi

    done
}

copymove(){
        while true; do 
            printf "move all necessary files? (e.g y - yes or n - no ):"
            read -r choice

                if [ "$choice" == "y" ]; then
                    COPYMOVE
                break
            elif [ "$choice" == "n" ]; then
                printf "installing fonts is canceled\n"
                break
            else
                printf "type y or n\n"
            fi

        done
}

zsh(){
    while true; do 
        printf "would you like to install zsh? (e.g y - yes or n - no ):"
        read -r choice

        if [ "$choice" == "y" ]; then
            ZSH
            break
        elif [ "$choice" == "n" ]; then
            printf "installing zsh is canceled\n"
            break
        else
            printf "type y or n\n"
        fi

    done

}




clear
cat <<'.'
 ______   _______  _______  _______  ___   ___      _______  _______ 
|      | |       ||       ||       ||   | |   |    |       ||       |
|  _    ||   _   ||_     _||    ___||   | |   |    |    ___||  _____|
| | |   ||  | |  |  |   |  |   |___ |   | |   |    |   |___ | |_____ 
| |_|   ||  |_|  |  |   |  |    ___||   | |   |___ |    ___||_____  |
|       ||       |  |   |  |   |    |   | |       ||   |___  _____| |
|______| |_______|  |___|  |___|    |___| |_______||_______||_______|
.
printf "                                                      made by arsyhiy\n"
printf "\n"
printf "=======================================================================\n"


# driver 
driver (){
    while true;do 
        printf "would you like to do all scrpits? (e.g y - yes or n - no):"
        read -r choice

        if [ "$choice" == "y" ]; then
            PACKAGES
            COPYMOVE
            ZSH
            break
        elif [ "$choice" == "n" ]; then
            printf "you will choice what to do\n"
             packages
             copymove
             zsh
             break
        else
            printf "type y or n\n"
        fi

        done
}
driver # NOTE: это для запуска driver
